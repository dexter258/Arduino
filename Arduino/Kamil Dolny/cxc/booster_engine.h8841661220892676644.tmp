Adafruit_MCP23017 mcp2;

extern byte error;
extern String mainInfoText[10][7];
extern byte randomMainInfo;
extern String additionalInfoText[4];
extern byte randomAddInfo;
extern byte status1[15];
extern byte deuterRandom;
extern bool debug;

bool enginePass = false;
bool engineButton[3] = {false, false, false};
bool engineButtonPrev[3] =  {false, false, false};
bool engineButtonFirst[3] = {false, false, false};
bool boosterButton[9]= {false, false, false, false, false, false, false, false, false};
byte engineError;
bool passLevelEngine[3] = {false, false, false};
bool activeSwitch[3] = {false, false, false};
void initBoosterEnginePanel() {
  mcp2.begin(2);
  for (byte i = 0; i < 12; i++) {
    mcp2.pinMode(i, INPUT_PULLUP);
    mcp2.digitalWrite(i, HIGH);
  }

  for (byte i = 12; i < 15; i++) {
    mcp2.pinMode(i, OUTPUT);
    //delay(500);
    mcp2.digitalWrite(i, LOW);
  }

  for (byte i = 9; i < 12; i++) {
    engineButtonPrev[i - 9] = !mcp.digitalRead(i);
  }
}

void readBoosterEngineKey() {
  for (byte i = 0; i < 12; i++) {
    if (mcp2.digitalRead(i) == LOW) {
      // Serial.println("Przycisk " + String(i));
    }
  }
}

void setEngineLeds() {
  mcp2.digitalWrite(12, !mcp2.digitalRead(9));
  mcp2.digitalWrite(13, !mcp2.digitalRead(10));
  mcp2.digitalWrite(14, !mcp2.digitalRead(11));

}

void readEngineButtons() {
  for (byte i = 0; i < 3; i ++) {

    engineButtonPrev[i] = engineButtonFirst[i];
    engineButtonFirst[i] = !mcp2.digitalRead(i + 9);
    if (engineButtonFirst[i] == true &&  engineButtonPrev[i] == false) {
      engineButton[i] = engineButtonFirst[i];

      if (debug == true) Serial.println("Button Engine " + String(i) + " = " + String(engineButton[i]));
    }
    else {
      engineButton[i] = false;


    }


  }

  for(byte i = 0; i < 9; i++){
      
      boosterButton[i] = !mcp2.digitalRead(i);
  }
}

void engineGame() {
  setEngineLeds();
  readEngineButtons();

  //LOGIKA DLA ENGINE I


  //Jeśli numer seryjny zawiera liczbę podzielna przez 3 oraz ENGINE II jest ON
  if (engineButtonFirst[1] == true && mainInfoText[randomMainInfo][5] == "Y") {

    activeSwitch[0] = true; // spelniony warunek
  }
  //Jeśli nie ma liczby podzielnej przez 3 oraz ENGINE II jest OFF
  else {
    activeSwitch[0] = false;
  }

  //LOGIKA DLA ENGINE II

  if (additionalInfoText[randomAddInfo] != "FKW") {
    activeSwitch[1] = true;
  }
  else if (status1[5] == 1 && status1[9] == 1 && status1[3] != 2) {
    activeSwitch[1] = true;
  }
  else {
    activeSwitch[1] = false;
  }

  // LOGIKA dla ENGINE III

  if ( activeSwitch[0] == false && activeSwitch[1] == false) {
    activeSwitch[2] = true;
  }
  else if ((deuterRandom == 1 || deuterRandom == 3) && mainInfoText[randomMainInfo][4] == "Y") {
    activeSwitch[2] = true;
  }
  else activeSwitch[2] = false;


  //LOGIKA SPRAWDZAJĄCA DLA ENGINE I
  
  if (engineButtonFirst[0] == true && activeSwitch[0] == true) {
    passLevelEngine[0] = true;
  }
  else if (engineButtonFirst[0] == false && activeSwitch[0] == true){
    passLevelEngine[0] = false;
  }
  else if (engineButtonFirst[0] == false && activeSwitch[0] == false) {
    passLevelEngine[0] = true;
  }
  else if(engineButton[0] == true){
    passLevelEngine[0] = false;
    error++;
    if(debug == true) Serial.println("Error ENGINE I");
  }

  //LOGIKA SPRAWDZAJĄCA DLA ENGINE II
  
  if (engineButtonFirst[1] == true && activeSwitch[1] == true) {
    passLevelEngine[1] = true;
  }
  else if (engineButtonFirst[0] == false && activeSwitch[1] == true){
    passLevelEngine[1] = false;
  }
  else if (engineButtonFirst[0] == false && activeSwitch[1] == false) {
    passLevelEngine[1] = true;
  }
  else if(engineButton[1] == true){
    passLevelEngine[1] = false;
    error++;
    if(debug == true) Serial.println("Error ENGINE II");
  }

  //LOGIKA SPRAWDZAJĄCA DLA ENGINE III
  
  if (engineButtonFirst[2] == true && activeSwitch[2] == true) {
    passLevelEngine[2] = true;
  }
  else if (engineButtonFirst[0] == false && activeSwitch[2] == true){
    passLevelEngine[2] = false;
  }
  else if (engineButtonFirst[2] == false && activeSwitch[2] == false) {
    passLevelEngine[2] = true;
  }
  else if(engineButton[2] == true){
    passLevelEngine[2] = false;
    error++;
    if(debug == true) Serial.println("Error ENGINE III");
  }

  if(passLevelEngine[0] == true && passLevelEngine[1] == true && passLevelEngine[2] == true){
    enginePass = true;
    if(debug == true) Serial.println("ENGINE END");
  }

  



}

