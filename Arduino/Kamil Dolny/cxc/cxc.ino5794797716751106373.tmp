#include <Wire.h>
#include "Adafruit_MCP23017.h"
#include "time.h"
#include "memory.h"
#include "errors.h"
#include "garret.h"
#include "start.h"
#include "button.h"

bool debug = true;
byte error = 0;
byte passedGames = 0;
bool sendInfoToSymbols = false;
bool sendInfoToSimon = false;
bool sendInfoToLabirynth = false;
bool sendInfoToButton = false;
byte debugGames = 0;
bool debugInput = false;
byte errorPrev = 0;

bool sendingInfo = false;
void setup() {
  randomSeed(analogRead(A8));

  Serial.begin(9600);
  Serial2.begin(9600);
  
  initInfoPanel();
  initStartPanel();
  
  initGarretPanel();
  initButtonPanel();

  initTimePanel();
  initMemoryPanel();
  initErrorsPanel();


  timer_t.attach(1, 200, checkGarret);
}

void checkSerialPorts() {
  String msg = "";

  if (Serial2.available() > 0) { // Pobieranie danych z portu szeregowego
    while (Serial2.available() > 0) { // pobieraj tak długo aż bufor będzie pusty
      msg += char(Serial2.read());
      delay(5);
    }

    setButtons(msg);
    if(debugInput == true) Serial.println(msg);

  }
}

void loop() {

  checkSerialPorts();




  if (gameStarted == false || restartGame == true) {

    readStartButton(); // Sprawdzenie czy przekręcono kluczyk start
  }

  if (gameStarted == true || debugGames != 10) { // Jeśli przekręcono kluczyk start

    //======GARRET GAME======//

    if (startGames[0] == true && garretPass == false || debugGames == 0) {

      if(garretFlag == false){
        setGarretNumbers(0,0,0);
        garretFlag == true;
      }
      if ( readAcceptGarret()) {
        
        garretGame();
        
      }

      if (garretPass == true) {
        setGarretNumbers(10, 10, 10);
      }
    }
    //END GARRET GAME

    //======SYMBOLS GAME=====//
    if (startGames[1] == true || debugGames == 1) {

      /*Do zrobienia:
         Nalezy za pomocą odpowiedniego serial port wyslać informacje o tym aby mozna było zacząć
         Nalezy także sprawdzać czy przyszła informacja zwrotna o błędach albo o ukończeniu zadania
      */

    }
    //END SYMBOLS GAME

    //======ENGINE GAME======//
    if (startGames[2] == true || debugGames == 2) {
      /*
         Do napisania jest cała gra
      */
    }
    //END ENGINE GAME

    //======LABIRYNTH GAME======//
    if (startGames[3] == true || debugGames == 3) {

      /*Do zrobienia:
         Nalezy za pomocą odpowiedniego serial port wyslać informacje o tym aby mozna było zacząć
         Nalezy także sprawdzać czy przyszła informacja zwrotna o błędach albo o ukończeniu zadania
      */
    }
    //END LABIRYNTH GAME

    //======PYROTECHNICS GAME======//
    if (startGames[4] == true || debugGames == 4) {
      //Do zrobienia cała gra
    }
    //END PYROTECHNICS GAME

    //======MEMORY GAME======//
    if (startGames[5] == true && memoryPass == false || debugGames == 5) {

      memoryGame();
    }
    //END MEMORY GAME

    //======BUTTON GAME======//
    if (startGames[6] == true && buttonPass == false || debugGames == 6) {

      if (sendInfoToButton == false) {
        sendingInfo = true;
        delay(50);
        randomButtonTextColor();
        delay(50);
        sendingInfo = false;
        sendInfoToButton = true;
      }
      if (buttonPass == false) {

        buttonGame();
        if (buttonPass == true) {
          lcd_button.clear();
          //lcd_button.setCursor(0, 0);
          //lcd_button.print("Zaliczono");
          sendingInfo = true;
          delay(50);
          Serial2.println("B" + String(4));
          delay(50);
          sendingInfo = false;
        }
      }
    }

    //END BUTTON GAME

    //======ABORT GAME======//
    if (startGames[7] == true || debugGames == 7) {

    }
    //END ABORT GAME

    //======SIMON SAYS GAME======//
    if (startGames[8] == true || debugGames == 8) {

      if(sendInfoToSimon == false){
        sendingInfo = true;
        delay(50);
        if(mainInfoText[randomMainInfo][3] == "Y"){
          Serial2.println("S1Y")
        }
        else {
          Serial2.println("S1N")
        }
        sendingInfo = false;
        sendInfoToSimon = true;
      }
     
    }

    //END SIMON SAYS GAME
  }

  timer_t.process();





  if (error > errorPrev) {
    setErrors(error);
  }

  errorPrev = error;

  if (error >= 3) {
    resetAllGames();
    restartGame = true;
    passedGames = 0;
    sendInfoToSymbols = false;
    sendInfoToSimon = false;
    sendInfoToLabirynth = false;
    sendInfoToButton = false;
    readStartButton();
    //randomNumber();
    error = 0;
    setErrors(error);
    errorPrev = 0;

    
  }
}

void resetAllGames() {
  //Garret
  sendingInfo = true;
  
  for (byte i = 0; i < 3; i++) {
    garretNumberButton[i] = 0; // Wyzerowanie liczb w garret
  }

  setGarretNumbers(10, 10, 10); // wyłączenie liczników
  garretPass = false;
  garretFlag = false;

  // Symbols

  /*
     Tutaj trzeba jeszcze to dodać

  */

  // ENGINE
  /*
     Tutaj trzeba jeszcze to dodać

  */

  // Labirynth
  /*
     Tutaj jeszcze trzeba to dodać
  */

  //Pyrotechnics
  /*
     Tutaj jeszcze trzeba to dodać
  */

  // MEMORY

  setNumbersMemory(10, 10, 10, 10, 10);
  //setMemoryLevel(0);
  memoryPass = false;
  memoryFlag = true;
  memoryLevel = 1;
  //

  //BUTTON

  buttonPass = false;
  lcd_button.clear();

  Serial2.println("B" + String(4));
  delay(50);

  //ABORT

  //SIMON SAYS

  Serial2.println("S0");
  delay(50);

  
  sendingInfo = false;
}
void setButtons(String info) {

  String temp1 = "", temp2 = "", temp3 = "";

  temp1 += info[0];
  temp2 += info[1];
  temp3 += info[2];

  garretButtonPrev[0] = garretButton[0];
  garretButtonPrev[1] = garretButton[1];
  garretButtonPrev[2] = garretButton[2];


  garretButton[0] = bool(temp1.toInt());
  garretButton[1] = bool(temp2.toInt());
  garretButton[2] = bool(temp3.toInt());

  if (garretButton[0] == true && garretButtonPrev[0] == false) {
    garretNumberButton[0] ++;
    if (garretNumberButton[0] > 9)
      garretNumberButton[0] = 0;

  }
  if (garretButton[1] == true && garretButtonPrev[1] == false) {
    garretNumberButton[1] ++;
    if (garretNumberButton[1] > 9)
      garretNumberButton[1] = 0;

  }

  if (garretButton[2] == true && garretButtonPrev[2] == false) {

    garretNumberButton[2] ++;
    if (garretNumberButton[2] > 9)
      garretNumberButton[2] = 0;

  }


  if (startGames[0] == true && garretPass == false || debugGames == 0) {

    setGarretNumbers(garretNumberButton[0], garretNumberButton[1], garretNumberButton[2]);
  }

  temp1 = "";
  temp1 += info[17];

  pressedButton = bool(temp1.toInt());

  if (debugInput == true && pressedButton == true) Serial.println("OK");

}
