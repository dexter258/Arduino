#include <Wire.h>
#include "Adafruit_MCP23017.h"
#include "time.h"
#include "memory.h"
#include "errors.h"
#include "garret.h"
#include "start.h"
#include "button.h"
#include "pyrotechnics.h"
#include "booster_engine.h"
#include "abort.h"
bool debug = true;
byte error = 0;
byte passedGames = 0;
byte passedGamesPrev = 0;
bool sendInfoToSymbols = false;
bool sendInfoToSimon = false;
bool sendInfoToLabirynth = false;
bool sendInfoToButton = false;
byte debugGames = 10;
bool debugInput = false;
byte errorPrev = 0;
bool simonPass = false;
bool sendingInfo = false;
void setup() {
  randomSeed(analogRead(A8));

  Serial.begin(9600);
  Serial2.begin(9600);
  Serial2.println("D5"); // reset Deuter
  delay(50);
  Serial2.println("B4"); // Wygaszenie paska button
  delay(50);
  initBoosterEnginePanel();
  initInfoPanel();
  initStartPanel();

  initGarretPanel();
  initButtonPanel();

  initTimePanel();
  initMemoryPanel();
  initErrorsPanel();
  initAbortPanel();
  setGarretNumbers(10, 10, 10);
  readEngineButtons();

  timer_t.attach(1, 100, checkGarret);
}
String infoButtons = "";

void checkSerialPorts() {
  String msg = "";
  
   passedGamesPrev = passedGames;
   
  if (Serial2.available() > 0) { // Pobieranie danych z portu szeregowego
    while (Serial2.available() > 0) { // pobieraj tak długo aż bufor będzie pusty
      msg += char(Serial2.read());
      delay(5);
    }
    if (msg[0] == 'S') {
      passedGames++;
      simonPass = true;
    }
    else if (msg[0] == 'E') {
      error++;
    }
    else {
      infoButtons = msg;

    }

    if (debugInput == true) Serial.println(msg);

  }
}

void loop() {

  //Serial.println(readPotValue());
  checkSerialPorts();
  setButtons(infoButtons);
  //readEngineButtons();
  
  //setEngineLeds();
  if (gameStarted == false || restartGame == true) {

    readStartButton(); // Sprawdzenie czy przekręcono kluczyk start
  }

  if (gameStarted == true || debugGames != 10) { // Jeśli przekręcono kluczyk start

    //======GARRET GAME======//

    if (startGames[0] == true && garretPass == false || debugGames == 0) {

      if (garretFlag == false) {
        setGarretNumbers(0, 0, 0);
        garretFlag = true;
      }
      if ( readAcceptGarret()) {

        garretGame();

      }

      if (garretPass == true) {
        setGarretNumbers(10, 10, 10);
      }
    }
    //END GARRET GAME

    //======SYMBOLS GAME=====//
    if (startGames[1] == true || debugGames == 1) {

      /*Do zrobienia:
         Nalezy za pomocą odpowiedniego serial port wyslać informacje o tym aby mozna było zacząć
         Nalezy także sprawdzać czy przyszła informacja zwrotna o błędach albo o ukończeniu zadania
      */

    }
    //END SYMBOLS GAME

    //======ENGINE GAME======//
    if (startGames[2] == true && enginePass == false || debugGames == 2) {

      if (enginePass == false) {
        engineGame();
      }

      if (enginePass == true) {
        passedGames++;
        mcp2.digitalWrite(12, LOW);
        mcp2.digitalWrite(13, LOW);
        mcp2.digitalWrite(14, LOW);
      }

    }
    //END ENGINE GAME

    //======LABIRYNTH GAME======//
    if (startGames[3] == true || debugGames == 3) {

      /*Do zrobienia:
         Nalezy za pomocą odpowiedniego serial port wyslać informacje o tym aby mozna było zacząć
         Nalezy także sprawdzać czy przyszła informacja zwrotna o błędach albo o ukończeniu zadania
      */
    }
    //END LABIRYNTH GAME

    //======PYROTECHNICS GAME======//
    if (startGames[4] == true && pyroPass == false || debugGames == 4 ) {
      if (pyroPass == false) {
        pyrotechnicsGame();
      }

      if (pyroPass == true) {
        passedGames++;
        if (debug == true) Serial.println("Zaliczone pyro");
      }

    }
    //END PYROTECHNICS GAME

    //======MEMORY GAME======//
    if (startGames[5] == true && memoryPass == false || debugGames == 5) {
      if(memoryPass == false){
        memoryGame();
      }
      if(memoryPass == true){
        passedGames ++;
      }
      
    }
    //END MEMORY GAME

    //======BUTTON GAME======//
    if (startGames[6] == true && buttonPass == false || debugGames == 6) {

      if (sendInfoToButton == false) {
        sendingInfo = true;
        delay(50);
        randomButtonTextColor();
        delay(50);
        sendingInfo = false;
        sendInfoToButton = true;
      }
      if (buttonPass == false) {

        buttonGame();
        if (buttonPass == true) {
          lcd_button.clear();
          //lcd_button.setCursor(0, 0);
          //lcd_button.print("Zaliczono");
          sendingInfo = true;
          delay(50);
          Serial2.println("B" + String(4));
          delay(50);
          sendingInfo = false;
        }
      }
    }

    //END BUTTON GAME

    //======ABORT GAME======//
    if (startGames[7] == true  && abortPass == false|| debugGames == 7) {
            if(abortPass == false){
              abortGame();
            }

            if(abortPass == true){
              passedGames++;
            }
    }
    //END ABORT GAME

    //======SIMON SAYS GAME======//
    if (startGames[8] == true || debugGames == 8) {

      if (sendInfoToSimon == false) {
        sendingInfo = true;
        delay(50);
        if (mainInfoText[randomMainInfo][3] == "Y") {
          Serial2.println("S1Y");
        }
        else {
          Serial2.println("S1N");
        }
        sendingInfo = false;
        sendInfoToSimon = true;
      }

    }

    //END SIMON SAYS GAME
  }

  timer_t.process();


  if(passedGames > passedGamesPrev){
    if(debug == true){
      Serial.println("Punkty = " + String(passedGames));
    }
  }


  if (error > errorPrev) {
    setErrors(error);
  }

  errorPrev = error;

  if (error >= 3) {
    resetAllGames();
    restartGame = true;
    passedGames = 0;
    sendInfoToSymbols = false;
    sendInfoToSimon = false;
    sendInfoToLabirynth = false;
    sendInfoToButton = false;
    readStartButton();
    //randomNumber();
    error = 0;
    setErrors(error);
    errorPrev = 0;


  }
}

void resetAllGames() {
  //Garret

  sendingInfo = true;

  for (byte i = 0; i < 3; i++) {
    garretNumberButton[i] = 0; // Wyzerowanie liczb w garret
  }

  setGarretNumbers(10, 10, 10); // wyłączenie liczników
  garretPass = false;
  garretFlag = false;

  // Symbols

  /*
     Tutaj trzeba jeszcze to dodać

  */

  // ENGINE
  enginePass = false;


  // Labirynth
  /*
     Tutaj jeszcze trzeba to dodać
  */

  //Pyrotechnics

  pyroPass = false;

  // MEMORY

  setNumbersMemory(10, 10, 10, 10, 10);
  //setMemoryLevel(0);
  memoryPass = false;
  memoryFlag = true;
  memoryLevel = 1;
  setMemoryLevel(0);
  //

  //BUTTON

  buttonPass = false;
  lcd_button.clear();
  sendInfoToButton = false;
  Serial2.println("B" + String(4));
  delay(50);

  //ABORT

  //SIMON SAYS
  simonPass = false;
  sendInfoToSimon = false;
  Serial2.println("S0");
  delay(50);



  sendingInfo = false;
}
void setButtons(String info) {

  //Zczytanie wartości przyciskow Garret
  readGarretButtons(info);
  readButtonButton(info);
  readPyroButtons(info);
  readAbortButtons(info);


}
